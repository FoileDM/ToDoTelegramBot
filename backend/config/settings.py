"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from datetime import timedelta
from pathlib import Path
from typing import Tuple, Any

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
for env_path in (BASE_DIR / ".env", BASE_DIR.parent / ".env"):
    if env_path.exists():
        load_dotenv(env_path, override=False)


def parse_bool_env(name: str, default: bool) -> bool:
    """
    Преобразует значение переменной окружения в булево значение.

    Args:
        name (str): Имя переменной окружения.
        default (bool): Значение по умолчанию, если переменная окружения отсутствует.

    Returns:
        bool: Результат преобразования значения переменной окружения в булево.
    """
    raw_value = os.getenv(name)
    if raw_value is None:
        return default
    return raw_value.strip().lower() in {"1", "true", "yes", "on"}


def parse_csv_env(name: str, default: str) -> Tuple[str, ...]:
    """
    Извлекает переменную окружения в виде списка строк, разделенных запятыми.

    Args:
        name (str): Название переменной окружения.
        default (str): Значение по умолчанию, которое используется, если переменная окружения не задана.

    Returns:
        Tuple[str, ...]: Кортеж строк, полученный из переменной окружения.

    Raises:
        KeyError: Если переменная окружения не найдена и значение default не указано.
    """
    raw_value = os.getenv(name, default)
    return tuple(value.strip() for value in raw_value.split(",") if value.strip())


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("DJANGO_SECRET_KEY", "dev-insecure")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "1")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "*").split(",")

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'users.apps.UsersConfig',
    'todo.apps.TodoConfig'
]

AUTH_USER_MODEL = "users.User"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": int(os.getenv("POSTGRES_PORT", "5432")),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'America/Adak'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "services.bot_auth.BotServiceJWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_RENDERER_CLASSES": ["rest_framework.renderers.JSONRenderer"],
}

# BOT JWT settings
BOT_JWT_PUBLIC_KEY = os.getenv("BOT_JWT_PUBLIC_KEY", "")
BOT_JWT_ISS = os.getenv("BOT_JWT_ISS", "todo-bot")
BOT_JWT_AUD = os.getenv("BOT_JWT_AUD", "todo-backend")
BOT_JWT_SCOPE = os.getenv("BOT_JWT_SCOPE", "bot:act_as_user")
BOT_JWT_ALG = os.getenv("BOT_JWT_ALG", "RS256")
BOT_JWT_LEEWAY = int(os.getenv("BOT_JWT_LEEWAY", "45"))

# Celery settings
CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://redis:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", CELERY_BROKER_URL)
CELERY_ACCEPT_CONTENT = parse_csv_env("CELERY_ACCEPT_CONTENT", "json")
CELERY_TASK_SERIALIZER = os.getenv("CELERY_TASK_SERIALIZER", "json")
CELERY_RESULT_SERIALIZER = os.getenv("CELERY_RESULT_SERIALIZER", CELERY_TASK_SERIALIZER)
CELERY_TIMEZONE = os.getenv("CELERY_TIMEZONE", TIME_ZONE)
CELERY_ENABLE_UTC = parse_bool_env("CELERY_ENABLE_UTC", True)
CELERY_IMPORTS = parse_csv_env("CELERY_IMPORTS", "services.telegram_notifications,todo.tasks")

TASK_DUE_REMINDER_PERIOD_SECONDS: int = int(os.getenv("TASK_DUE_REMINDER_PERIOD_SECONDS", 900))
CELERY_BEAT_SCHEDULE: dict[str, dict[str, Any]] = {
    "notify_upcoming_tasks": {
        "task": "todo.notify_upcoming_tasks",
        "schedule": timedelta(seconds=TASK_DUE_REMINDER_PERIOD_SECONDS),
    }
}

# Telegram bot settings
_TELEGRAM_BOT_TOKEN_RAW = os.getenv("BOT_TOKEN", "").strip()
TELEGRAM_BOT_TOKEN = _TELEGRAM_BOT_TOKEN_RAW

_TELEGRAM_API_BASE_DEFAULT = "https://api.telegram.org"
_TELEGRAM_API_BASE_RAW = os.getenv("TELEGRAM_API_BASE", _TELEGRAM_API_BASE_DEFAULT).strip()
TELEGRAM_API_BASE = _TELEGRAM_API_BASE_RAW or _TELEGRAM_API_BASE_DEFAULT
