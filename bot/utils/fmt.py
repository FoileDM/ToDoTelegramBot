"""–°–æ–¥–µ—Ä–∂–∏—Ç —É—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram."""

from __future__ import annotations

from collections.abc import Iterable, Mapping, Sequence
from textwrap import shorten
from typing import Any, TypeAlias

from utils.dt import format_dt_user

DESCRIPTION_SHORT_LENGTH = 160
TAG_DISPLAY_LIMIT = 5

STATUS_PRESENTATION: Mapping[str, tuple[str, str]] = {
    "active": ("üü°", "–í —Ä–∞–±–æ—Ç–µ"),
    "done": ("‚úÖ", "–ì–æ—Ç–æ–≤–æ"),
    "expired": ("‚è∞", "–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ"),
}

CategoryPayload: TypeAlias = Mapping[str, Any]
TaskPayload: TypeAlias = Mapping[str, Any]


def _resolve_status(status: str | None) -> tuple[str, str]:
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∫–æ–Ω–∫—É –∏ –º–µ—Ç–∫—É –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞.

    Args:
        status (str | None): –°—Ç–∞—Ç—É—Å, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏ –º–µ—Ç–∫—É.
            –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ None, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.

    Returns:
        tuple[str, str]: –ö–æ—Ä—Ç–µ–∂, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∏–∫–æ–Ω–∫—É –∏ –º–µ—Ç–∫—É —Å—Ç–∞—Ç—É—Å–∞.

    """
    default_icon, default_label = "‚ö™Ô∏è", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å"
    if not status:
        return default_icon, default_label
    return STATUS_PRESENTATION.get(status, (default_icon, default_label))


def _format_tags(categories: Sequence[CategoryPayload] | None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å—Ç—Ä–æ–∫—É —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏.

    –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
        categories (Sequence[CategoryPayload] | None): –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ö—ç—à—Ç–µ–≥–∞–º–∏ –∏–ª–∏ "‚Äî", –µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.
    """

    if not categories:
        return "‚Äî"

    normalized_tags: list[str] = []
    for category in categories:
        slug = str(category.get("slug") or "").strip()
        name = str(category.get("name") or "").strip()
        tag_value = slug or name
        if not tag_value:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –≤—ã–≤–æ–¥.
            continue
        normalized_tags.append(f"#{tag_value}")

    if not normalized_tags:
        return "‚Äî"

    if len(normalized_tags) <= TAG_DISPLAY_LIMIT:
        return ", ".join(normalized_tags)

    visible_tags = normalized_tags[:TAG_DISPLAY_LIMIT]
    hidden_count = len(normalized_tags) - TAG_DISPLAY_LIMIT
    return ", ".join(visible_tags + [f"+{hidden_count}"])


def fmt_task_line(task: TaskPayload) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    Args:
        task (TaskPayload): –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–¥–∞—á–∏.
    """

    status_raw = task.get("status")
    status_icon, status_label = _resolve_status(status_raw if isinstance(status_raw, str) else None)
    title = str(task.get("title") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    description_raw = str(task.get("description") or "").strip()
    description = (
        shorten(description_raw, width=DESCRIPTION_SHORT_LENGTH, placeholder="‚Ä¶")
        if description_raw
        else ""
    )
    created_at = format_dt_user(task.get("created_at"))
    due_at = format_dt_user(task.get("due_at"))
    categories_raw = task.get("categories_detail")
    is_sequence = isinstance(categories_raw, Sequence) and not isinstance(categories_raw, (str, bytes))
    categories: Sequence[CategoryPayload] | None = categories_raw if is_sequence else None
    tags = _format_tags(categories)

    lines: list[str] = [f"{status_icon} {status_label}", f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}"]
    if description:
        lines.append(f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}")
    lines.append(f"–°–æ–∑–¥–∞–Ω–∞: {created_at}")
    lines.append(f"–î–µ–¥–ª–∞–π–Ω: {due_at}")
    lines.append(f"–¢–µ–≥–∏: {tags}")
    return "\n".join(lines)


def fmt_categories_list(cats: Iterable[dict]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.

    Args:
        cats (Iterable[dict]): –ò—Ç–µ—Ä–∞—Ü–∏—è —Å–ª–æ–≤–∞—Ä–µ–π —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–ª–æ–≤–∞—Ä—å
            –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–ª—é—á–∏ 'name' –∏ 'slug'.

    Returns:
        str: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
            "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π.", –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç.
    """
    lines = []
    for c in cats:
        lines.append(f"‚Ä¢ {c['name']} (/{c['slug']})")
    return "\n".join(lines) if lines else "–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
